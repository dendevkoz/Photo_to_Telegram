import requests
from pathlib import Path
from urllib.parse import urlsplit, unquote
from os import path
import datetime
import os


def create_directory():
    directory_path = Path.cwd() / "image"
    if not directory_path.exists():
        directory_path.mkdir()
    return directory_path


def file_extension(link):
  link = unquote(link)
  link_split = urlsplit(link)
  extension = path.splitext(link_split.path)[1]
  return extension
      

def fetch_spacex_last_launch(url):
    response = requests.get(url)
    data = response.json()
    for item in data:
        if item["id"] == "5eb87d47ffd86e000604b38a":
            image = item["links"]["flickr"]["original"]
            for image_number, image_url in enumerate(image):
              response = requests.get(image_url)
              extension = str(file_extension(image_url))
              with open(create_directory() / f"spacex_{image_number}{extension}", "wb") as file:
                  file.write(response.content)


def nasa_images():
    image=[]
    token = os.environ['NASA_KEY']
    payload = {
        "count": 5,
        "api_key": token,
    }
    response = requests.get("https://api.nasa.gov/planetary/apod", params=payload)
    data = response.json()
    for item in data:
        image.append(item["url"])
    for image_number, image_url in enumerate(image):
        response = requests.get(image_url)
        extension = str(file_extension(image_url))
        with open(create_directory() / f"nasa_apod{image_number}{extension}", "wb") as file:
            file.write(response.content)


def nasa_epic():
    image = []
    token = os.environ['NASA_KEY']
    payload = {
        "api_key": token,
    }
    date_response = requests.get(
        "https://api.nasa.gov/EPIC/api/natural/all",
        params=payload)
    data = date_response.json()
    last_date = datetime.date.fromisoformat(data[0]["date"])
    last_date_formatted = last_date.strftime("%Y/%m/%d")
    last_date_respone = requests.get(f"https://api.nasa.gov/EPIC/api/natural/date/{last_date}",     params=payload)
    last_date_image = last_date_respone.json()
    for item in last_date_image:
        image.append(item["image"])
    for item in image:
        response = requests.get(f"https://api.nasa.gov/EPIC/archive/natural/{last_date_formatted}/png/{item + '.png'}", params=payload)
        extension = ".png"
        with open(create_directory() / f"nasa_epic_{item[-4:]}{extension}", "wb") as file:
            file.write(response.content)
    


if __name__ == "__main__":
    url = "https://api.spacexdata.com/v5/launches"
    fetch_spacex_last_launch(url)
    nasa_images()
    nasa_epic()
